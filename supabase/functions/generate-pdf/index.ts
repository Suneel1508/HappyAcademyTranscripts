import { createClient } from 'npm:@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type, Authorization',
}

interface PDFRequest {
  transcriptId: string
  studentInfo: any
  courses: any[]
  gpaData: any
}

Deno.serve(async (req: Request) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, {
      status: 200,
      headers: corsHeaders,
    })
  }

  try {
    // Only allow POST requests
    if (req.method !== 'POST') {
      return new Response(
        JSON.stringify({ success: false, error: 'Method not allowed' }),
        {
          status: 405,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        }
      )
    }

    // Parse request body
    const { transcriptId, studentInfo, courses, gpaData }: PDFRequest = await req.json()

    console.log('Generating PDF for transcript:', transcriptId)

    // Validate input
    if (!transcriptId || !studentInfo || !courses) {
      return new Response(
        JSON.stringify({ success: false, error: 'Missing required data' }),
        {
          status: 400,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        }
      )
    }

    // Initialize Supabase client
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
    
    const supabase = createClient(supabaseUrl, supabaseServiceKey)

    // Generate HTML content for PDF
    const htmlContent = generateTranscriptHTML(studentInfo, courses, gpaData)

    // For now, return the HTML content as a simple PDF-like response
    // In a production environment, you would use a PDF generation library
    const pdfContent = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Official Transcript - ${studentInfo.last_name}, ${studentInfo.first_name}</title>
    <style>
        body { 
            font-family: 'Times New Roman', serif; 
            margin: 0; 
            padding: 20px; 
            background: white;
            position: relative;
        }
        .watermark {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%) rotate(-45deg);
            font-size: 72px;
            color: rgba(200, 200, 200, 0.3);
            font-weight: bold;
            z-index: -1;
            pointer-events: none;
        }
        .header { text-align: center; margin-bottom: 30px; }
        .title { font-size: 18px; font-weight: bold; letter-spacing: 2px; margin-bottom: 10px; }
        .contact { font-size: 12px; line-height: 1.4; }
        .section-title { font-size: 14px; font-weight: bold; text-align: center; margin: 20px 0 15px; letter-spacing: 1px; }
        .student-info { margin-bottom: 30px; }
        .student-table { width: 100%; font-size: 12px; }
        .student-table td { padding: 3px 0; }
        .student-table .label { font-weight: bold; width: 150px; }
        .gpa-summary { text-align: center; margin: 20px 0; font-size: 12px; }
        .school-header { background: #f0f0f0; padding: 5px; font-weight: bold; font-size: 12px; margin-top: 20px; }
        .semester-header { font-weight: bold; font-size: 12px; margin: 10px 0 5px 10px; }
        .course-table { width: 100%; border-collapse: collapse; font-size: 10px; margin-bottom: 10px; }
        .course-table th, .course-table td { border: 1px solid black; padding: 3px; text-align: center; }
        .course-table th { background: white; font-weight: bold; }
        .course-table .course-title { text-align: left; }
        .semester-gpa { text-align: right; font-size: 12px; font-weight: bold; margin-bottom: 15px; }
        .footer { margin-top: 30px; padding-top: 15px; border-top: 1px solid black; font-size: 12px; }
        .signature-section { float: right; text-align: right; }
        .signature-line { border-bottom: 1px solid black; width: 200px; margin: 10px 0; }
        @media print {
            .watermark { position: fixed; }
        }
    </style>
</head>
<body>
    <div class="watermark">UNOFFICIAL TRANSCRIPT</div>
    
    ${htmlContent}
    
    <div class="footer">
        <div style="margin-bottom: 20px; font-size: 12px;">
            <p><strong>LEGEND:</strong></p>
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 5px; margin-top: 5px;">
                <div>CL - College Level</div>
                <div>H - Honors</div>
                <div>AP - Advanced Placement</div>
                <div>IP - In Progress</div>
                <div>P - Pass</div>
                <div>F - Fail</div>
            </div>
        </div>
        
        <div style="float: left;">
            <p>Transcript generated on ${new Date().toLocaleDateString()}</p>
            <p>Generated by: Admin</p>
        </div>
        <div class="signature-section">
            <p><strong>Legend College Preparatory</strong></p>
            <p>Registrar's Office</p>
            <div style="margin-top: 20px;">
                <p>Principal Signature:</p>
                <div class="signature-line"></div>
                <p>Date: _______________</p>
            </div>
        </div>
        <div style="clear: both;"></div>
    </div>
</body>
</html>`

    // Return PDF content as blob
    const encoder = new TextEncoder()
    const pdfBlob = encoder.encode(pdfContent)

    return new Response(pdfBlob, {
      status: 200,
      headers: {
        ...corsHeaders,
        'Content-Type': 'text/html',
        'Content-Disposition': `attachment; filename="${studentInfo.first_name}_${studentInfo.last_name}_Transcript.html"`,
      },
    })
  } catch (error) {
    console.error('PDF generation error:', error)
    return new Response(
      JSON.stringify({ success: false, error: 'Internal server error' }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    )
  }
})

function generateTranscriptHTML(studentInfo: any, courses: any[], gpaData: any): string {
  // Group courses by school and semester
  const groupedCourses = courses.reduce((acc, course) => {
    if (!course.school_name) return acc
    
    if (!acc[course.school_name]) {
      acc[course.school_name] = {}
    }
    
    const semesterKey = `${course.semester} ${course.year}`
    if (!acc[course.school_name][semesterKey]) {
      acc[course.school_name][semesterKey] = []
    }
    
    acc[course.school_name][semesterKey].push(course)
    return acc
  }, {} as Record<string, Record<string, any[]>>)

  return `
    <div class="header">
        <div class="title">LEGEND COLLEGE PREPARATORY TRANSCRIPT</div>
        <div class="contact">
            <p>123 Education Street, Learning City, LC 12345</p>
            <p>Phone: (555) 123-4567 | Email: registrar@legendprep.edu</p>
        </div>
    </div>

    <div class="section-title">STUDENT INFORMATION</div>
    <div class="student-info">
        <table class="student-table">
            <tr>
                <td class="label">Student Name:</td>
                <td>${studentInfo.last_name}, ${studentInfo.first_name}</td>
            </tr>
            <tr>
                <td class="label">Address:</td>
                <td>${studentInfo.address}</td>
            </tr>
            <tr>
                <td class="label">Date of Birth:</td>
                <td>${studentInfo.date_of_birth ? new Date(studentInfo.date_of_birth).toLocaleDateString() : ''}</td>
            </tr>
            <tr>
                <td class="label">Guardian:</td>
                <td>${studentInfo.guardian_name}</td>
            </tr>
            <tr>
                <td class="label">Student Number:</td>
                <td>${studentInfo.student_number}</td>
            </tr>
            <tr>
                <td class="label">Gender:</td>
                <td>${studentInfo.gender}</td>
            </tr>
            <tr>
                <td class="label">SSN:</td>
                <td>${studentInfo.ssn}</td>
            </tr>
        </table>
    </div>

    <div class="section-title">GPA SUMMARY</div>
    <div class="gpa-summary">
        <p><strong>Cumulative GPA (Weighted):</strong> ${gpaData.cumulativeWeightedGPA.toFixed(3)}</p>
    </div>

    <div class="section-title">ACADEMIC RECORD</div>
    ${Object.entries(groupedCourses).map(([schoolName, semesters]) => `
        <div class="school-header">${schoolName}</div>
        ${Object.entries(semesters).map(([semesterKey, semesterCourses]) => {
          const semesterGPA = calculateSemesterGPA(semesterCourses)
          return `
            <div class="semester-header">${semesterKey}</div>
            <table class="course-table">
                <thead>
                    <tr>
                        <th style="width: 15%">Grade Level</th>
                        <th style="width: 15%">School Year</th>
                        <th style="width: 35%">Course Title</th>
                        <th style="width: 10%">H/AP</th>
                        <th style="width: 10%">Grade</th>
                        <th style="width: 15%">Credits</th>
                    </tr>
                </thead>
                <tbody>
                    ${semesterCourses.map(course => `
                        <tr>
                            <td>Grade ${course.year - 2006}</td>
                            <td>${course.year}</td>
                            <td class="course-title">${course.course_name}</td>
                            <td>${course.course_level === 'Honors' ? 'H' : course.course_level === 'AP' ? 'AP' : ''}</td>
                            <td><strong>${course.grade}</strong></td>
                            <td>${course.credits.toFixed(1)}</td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
            <div class="semester-gpa">Sem. GPA (Weighted): ${semesterGPA.toFixed(3)}</div>
          `
        }).join('')}
    `).join('')}
  `
}

function calculateSemesterGPA(courses: any[]): number {
  // Filter out courses with grades that should be excluded from GPA calculation
  const gradedCourses = courses.filter(course => course.grade !== 'P' && course.grade !== 'IP')
  
  if (gradedCourses.length === 0) return 0
  
  let totalWeightedPoints = 0
  let totalCredits = 0

  for (const course of gradedCourses) {
    const gradePoints = lookupGradePoints(course.grade, course.course_level)
    const weightedPoints = gradePoints * course.credits
    
    totalWeightedPoints += weightedPoints
    totalCredits += course.credits
  }

  if (totalCredits === 0) return 0
  
  return totalWeightedPoints / totalCredits
}

function lookupGradePoints(grade: string, courseLevel: string): number {
  const GRADE_POINT_SCALES: Record<string, Record<string, number>> = {
    'Regular': {
      'A+': 4.33, 'A': 4.00, 'A-': 3.67, 'B+': 3.33, 'B': 3.00, 'B-': 2.67,
      'C+': 2.33, 'C': 2.00, 'C-': 1.67, 'D+': 1.33, 'D': 1.00, 'D-': 0.67,
      'P': 0.00, 'IP': 0.00
    },
    'Honors': {
      'A+': 4.67, 'A': 4.33, 'A-': 4.00, 'B+': 3.67, 'B': 3.33, 'B-': 3.00,
      'C+': 2.67, 'C': 2.33, 'C-': 2.00, 'D+': 1.67, 'D': 1.33, 'D-': 1.00,
      'P': 0.00, 'IP': 0.00
    },
    'AP': {
      'A+': 5.33, 'A': 5.00, 'A-': 4.67, 'B+': 4.33, 'B': 4.00, 'B-': 3.67,
      'C+': 3.33, 'C': 3.00, 'C-': 2.67, 'D+': 2.33, 'D': 2.00, 'D-': 1.67,
      'P': 0.00, 'IP': 0.00
    },
    'College Level': {
      'A+': 5.33, 'A': 5.00, 'A-': 4.67, 'B+': 4.33, 'B': 4.00, 'B-': 3.67,
      'C+': 3.33, 'C': 3.00, 'C-': 2.67, 'D+': 2.33, 'D': 2.00, 'D-': 1.67,
      'P': 0.00, 'IP': 0.00
    }
  }

  return GRADE_POINT_SCALES[courseLevel]?.[grade] || 0
}